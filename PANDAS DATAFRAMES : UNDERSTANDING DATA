{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOCAsJ28eHBbGayHlLfy82t",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/madhukirankathipalli/codemind-c/blob/main/PANDAS%20DATAFRAMES%20%3A%20UNDERSTANDING%20DATA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "A.Loading data from csv excel and text files\n"
      ],
      "metadata": {
        "id": "_FLmdFTEgjys"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8VDMaZuzX3uf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 142
        },
        "outputId": "d8f33b20-bcf7-4a78-a1d2-5a2e0ba160a6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-236bbe4f-e6b7-4775-a147-9793f021ca0e\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-236bbe4f-e6b7-4775-a147-9793f021ca0e\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Iris_data_sample (3).csv to Iris_data_sample (3) (2).csv\n",
            "Saving Iris_data_sample (1).xlsx to Iris_data_sample (1) (1).xlsx\n",
            "Saving Iris_data_sample (1).txt to Iris_data_sample (1) (1).txt\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "Iris = list(uploaded.keys())\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data_csv=pd.read_csv(Iris[0])\n",
        "print(data_csv)\n",
        "data_csv=pd.read_csv(Iris[0],index_col=0)\n",
        "data_csv=pd.read_csv(Iris[0],index_col=0,na_values=[\"??\",\"###\"])\n",
        "print(data_csv)\n",
        "data_xlsx=pd.read_excel(Iris[1],sheet_name='iris_data')\n",
        "print(data_xlsx)\n",
        "data_xlsx=pd.read_excel(Iris[1],sheet_name='iris_data',index_col=0)\n",
        "data_xlsx=pd.read_excel(Iris[1],sheet_name='iris_data',index_col=0,na_values=[\"??\",\"###\"])\n",
        "print(data_xlsx)\n",
        "data_txt=pd.read_table(Iris[2])\n",
        "print('data-text format')\n",
        "print(data_txt)\n",
        "data_txt=pd.read_table(Iris[2],sep='\\t')\n",
        "print(data_txt)\n",
        "data_txt1=pd.read_table(Iris[2],delimiter='\\t')\n",
        "print(data_txt)\n",
        "data_txt1=pd.read_table(Iris[2],delimiter=' ')\n",
        "data_txt1=pd.read_table(Iris[2],delimiter=' ',index_col=0)\n",
        "data_txt1=pd.read_table(Iris[2],delimiter=' ',index_col=0,na_values=[\"??\",\"# # #\"])\n",
        "print('data-text format with nan')\n",
        "print(data_txt1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6O5mCCt2et7o",
        "outputId": "b67617dd-19ec-4c2c-93e9-7bc8c612e843"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   sepal.length  sepal.width  petal.length  petal.width variety\n",
            "0           5.1          3.5           1.4          0.2  Setosa\n",
            "1           4.9          3.0           1.4          0.2  Setosa\n",
            "2           4.7          3.2           1.3          0.2  Setosa\n",
            "3           4.6          3.1           1.5          0.2   \"###\"\n",
            "4           5.0          3.6           NaN          0.2  Setosa\n",
            "5           5.4          3.9           1.7          0.4  Setosa\n",
            "6           NaN          3.4           1.4          0.3  Setosa\n",
            "7           5.0          3.4           1.5          0.2     NaN\n",
            "8           4.4          2.9           1.4          0.2  Setosa\n",
            "              sepal.width  petal.length  petal.width variety\n",
            "sepal.length                                                \n",
            "5.1                   3.5           1.4          0.2  Setosa\n",
            "4.9                   3.0           1.4          0.2  Setosa\n",
            "4.7                   3.2           1.3          0.2  Setosa\n",
            "4.6                   3.1           1.5          0.2   \"###\"\n",
            "5.0                   3.6           NaN          0.2  Setosa\n",
            "5.4                   3.9           1.7          0.4  Setosa\n",
            "NaN                   3.4           1.4          0.3  Setosa\n",
            "5.0                   3.4           1.5          0.2     NaN\n",
            "4.4                   2.9           1.4          0.2  Setosa\n",
            "   sepal.length  sepal.width  petal.length  petal.width variety\n",
            "0           5.1          3.5           1.4          0.2  Setosa\n",
            "1           4.9          3.0           1.4          0.2  Setosa\n",
            "2           4.7          3.2           1.3          0.2     NaN\n",
            "3           4.6          3.1           1.5          0.2  Setosa\n",
            "4           5.0          NaN           1.4          0.2   \"###\"\n",
            "5           5.4          3.9           1.7          0.4  Setosa\n",
            "6           4.6          3.4           NaN          0.3  Setosa\n",
            "7           5.0          3.4           1.5          0.2  Setosa\n",
            "8           4.4          2.9           1.4          0.2  Setosa\n",
            "              sepal.width  petal.length  petal.width variety\n",
            "sepal.length                                                \n",
            "5.1                   3.5           1.4          0.2  Setosa\n",
            "4.9                   3.0           1.4          0.2  Setosa\n",
            "4.7                   3.2           1.3          0.2     NaN\n",
            "4.6                   3.1           1.5          0.2  Setosa\n",
            "5.0                   NaN           1.4          0.2   \"###\"\n",
            "5.4                   3.9           1.7          0.4  Setosa\n",
            "4.6                   3.4           NaN          0.3  Setosa\n",
            "5.0                   3.4           1.5          0.2  Setosa\n",
            "4.4                   2.9           1.4          0.2  Setosa\n",
            "data-text format\n",
            "   sepal.length sepal.width  petal.length  petal.width variety\n",
            "0           5.1         3.5           1.4          0.2  Setosa\n",
            "1           4.9           3           1.4          0.2  Setosa\n",
            "2           4.7         NaN           1.3          0.2  Setosa\n",
            "3           4.6         3.1           1.5          0.2  Setosa\n",
            "4           5.0         3.6           1.4          0.2  Setosa\n",
            "5           5.4         3.9           1.7          NaN  Setosa\n",
            "6           4.6         3.4           1.4          0.3  Setosa\n",
            "7           5.0         ###           1.5          0.2  Setosa\n",
            "8           4.4         2.9           1.4          0.2     NaN\n",
            "9           4.9         3.1           1.5          0.1  Setosa\n",
            "   sepal.length sepal.width  petal.length  petal.width variety\n",
            "0           5.1         3.5           1.4          0.2  Setosa\n",
            "1           4.9           3           1.4          0.2  Setosa\n",
            "2           4.7         NaN           1.3          0.2  Setosa\n",
            "3           4.6         3.1           1.5          0.2  Setosa\n",
            "4           5.0         3.6           1.4          0.2  Setosa\n",
            "5           5.4         3.9           1.7          NaN  Setosa\n",
            "6           4.6         3.4           1.4          0.3  Setosa\n",
            "7           5.0         ###           1.5          0.2  Setosa\n",
            "8           4.4         2.9           1.4          0.2     NaN\n",
            "9           4.9         3.1           1.5          0.1  Setosa\n",
            "   sepal.length sepal.width  petal.length  petal.width variety\n",
            "0           5.1         3.5           1.4          0.2  Setosa\n",
            "1           4.9           3           1.4          0.2  Setosa\n",
            "2           4.7         NaN           1.3          0.2  Setosa\n",
            "3           4.6         3.1           1.5          0.2  Setosa\n",
            "4           5.0         3.6           1.4          0.2  Setosa\n",
            "5           5.4         3.9           1.7          NaN  Setosa\n",
            "6           4.6         3.4           1.4          0.3  Setosa\n",
            "7           5.0         ###           1.5          0.2  Setosa\n",
            "8           4.4         2.9           1.4          0.2     NaN\n",
            "9           4.9         3.1           1.5          0.1  Setosa\n",
            "data-text format with nan\n",
            "Empty DataFrame\n",
            "Columns: []\n",
            "Index: [5.1\t3.5\t1.4\t0.2\tSetosa, 4.9\t3\t1.4\t0.2\tSetosa, 4.7\t\t1.3\t0.2\tSetosa, 4.6\t3.1\t1.5\t0.2\tSetosa, 5\t3.6\t1.4\t0.2\tSetosa, 5.4\t3.9\t1.7\t\tSetosa, 4.6\t3.4\t1.4\t0.3\tSetosa, 5\t\"###\"\t1.5\t0.2\tSetosa, 4.4\t2.9\t1.4\t0.2\t, 4.9\t3.1\t1.5\t0.1\tSetosa]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "B.Compute the basic statistics of given data_index no.of columns ,size,shape,memory usage ,no. of dimensions"
      ],
      "metadata": {
        "id": "ufMYotY1ge6T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "\n",
        "#upload a file from your location\n",
        "uploaded = files.upload()\n",
        "\n",
        "#get the name of the uploaded file\n",
        "Iriis= list(uploaded.keys())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "w5pO9Y1xgdlr",
        "outputId": "df98c9a0-a974-4778-9d0d-8e8bc4606e19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-402d9297-c514-4518-8367-041e7cc1c021\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-402d9297-c514-4518-8367-041e7cc1c021\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Toyota_sample (1).xlsx to Toyota_sample (1).xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cars_data=pd.read_excel('Toyota_sample (1).xlsx', index_col=0)\n",
        "cars_data1=cars_data.copy(deep=True)\n"
      ],
      "metadata": {
        "id": "4YGPHv4Wg3Q0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print(\"row labels of the dataframe are\", cars_data1.index)\n",
        "print(\"column labels of the dataframe are\", cars_data1.columns)\n",
        "cols=len(cars_data1.axes[1])\n",
        "print('no of columns:', cols)\n",
        "print('total number of elements from the dataframe:', cars_data1.size)\n",
        "print('memory usage of each column in bytes:', cars_data1.memory_usage())\n",
        "print(' number of array dimensions:', cars_data1.ndim)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gm1XNrlRg43T",
        "outputId": "948173d2-95ab-48f9-c8a9-3789747a4db1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "row labels of the dataframe are Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype='int64')\n",
            "column labels of the dataframe are Index(['Price', 'Age', 'KM', 'FuelType', 'HP', 'MetColor', 'Automatic', 'CC',\n",
            "       'Doors', 'Weight'],\n",
            "      dtype='object')\n",
            "no of columns: 10\n",
            "total number of elements from the dataframe: 170\n",
            "memory usage of each column in bytes: Index        136\n",
            "Price        136\n",
            "Age          136\n",
            "KM           136\n",
            "FuelType     136\n",
            "HP           136\n",
            "MetColor     136\n",
            "Automatic    136\n",
            "CC           136\n",
            "Doors        136\n",
            "Weight       136\n",
            "dtype: int64\n",
            " number of array dimensions: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "C.Perform indexing and selecting data from a pandas data frame\n"
      ],
      "metadata": {
        "id": "x6YRoPxJrbrp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "\n",
        "#upload a file from your location\n",
        "uploaded = files.upload()\n",
        "\n",
        "#get the name of the uploaded file\n",
        "Iriis= list(uploaded.keys())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "id": "PX6w-SbjuU7y",
        "outputId": "0a3b0d65-b6c3-41f7-c4d8-5cf2065e9003"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-039eb7fa-b61c-4d57-af58-30cc4f122a41\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-039eb7fa-b61c-4d57-af58-30cc4f122a41\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Toyota_sample (1).xlsx to Toyota_sample (1) (2).xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cars_data=pd.read_excel('Toyota_sample (1).xlsx', index_col=0)\n",
        "# copying the data into new dataframe\n",
        "cars_data1=cars_data.copy(deep=True)\n",
        "# The first n rows from the dataframe\n",
        "print('first 6 rows from the dataframe:', cars_data1.head(6))\n",
        "# The last n rows from the dataframe\n",
        "print(' last 5 rows from the dataframe:', cars_data1.tail(5))\n",
        "# To access a scalar value, the fastest way is to use the at and iat methods\n",
        "# at provides label based scalar lookups\n",
        "print('access 4th row from FuelType column:', cars_data1.at [4, 'FuelType'])\n",
        "# iat provides integer based lookups\n",
        "print('access 5th row from 6th column:', cars_data1.iat[5, 6])\n",
        "# To access a group of rows and columns by label(s) . loc() can be used\n",
        "print('access all elements from FuelType column:', cars_data1.loc[:, 'FuelType'])\n",
        "print('access all elements from FuelType column:', cars_data1.loc[:,: 'FuelType'])"
      ],
      "metadata": {
        "id": "yUQsbSh_rdLB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a8ab950-3249-4e9a-eb44-04dd2453550c"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "first 6 rows from the dataframe:    Price  Age     KM FuelType  HP  MetColor  Automatic    CC  Doors  Weight\n",
            "0  13500   23  46986   Diesel  90       1.0          0  2000  three    1165\n",
            "1  13750   23  72937   Diesel  90       1.0          0  2000      3    1165\n",
            "2  13950   24  41711   Diesel  90       NaN          0  2000      3    1165\n",
            "3  14950   26  48000   Diesel  90       0.0          0  2000      3    1165\n",
            "4  13750   30  38500   Diesel  90       0.0          0  2000      3    1170\n",
            "5  12950   32  61000   Diesel  90       0.0          0  2000      3    1170\n",
            " last 5 rows from the dataframe:     Price  Age     KM FuelType    HP  MetColor  Automatic    CC Doors  Weight\n",
            "12  19600   25  32189      CNG   192       0.0          0  1800     3    1185\n",
            "13  21500   31  23000      CNG   192       1.0          0  1800     3    1185\n",
            "14  22500   32  34131   Petrol   192       1.0          0  1800     3    1185\n",
            "15  22000   28  18739   Petrol  ????       0.0          0  1800     3    1185\n",
            "16  22750   30  34000   Petrol   192       1.0          0  1800     3    1185\n",
            "access 4th row from FuelType column: Diesel\n",
            "access 5th row from 6th column: 0\n",
            "access all elements from FuelType column: 0     Diesel\n",
            "1     Diesel\n",
            "2     Diesel\n",
            "3     Diesel\n",
            "4     Diesel\n",
            "5     Diesel\n",
            "6     Diesel\n",
            "7        NaN\n",
            "8     Petrol\n",
            "9     Diesel\n",
            "10    Petrol\n",
            "11    Petrol\n",
            "12       CNG\n",
            "13       CNG\n",
            "14    Petrol\n",
            "15    Petrol\n",
            "16    Petrol\n",
            "Name: FuelType, dtype: object\n",
            "access all elements from FuelType column:     Price  Age     KM FuelType\n",
            "0   13500   23  46986   Diesel\n",
            "1   13750   23  72937   Diesel\n",
            "2   13950   24  41711   Diesel\n",
            "3   14950   26  48000   Diesel\n",
            "4   13750   30  38500   Diesel\n",
            "5   12950   32  61000   Diesel\n",
            "6   16900   27     ??   Diesel\n",
            "7   18600   30  75889      NaN\n",
            "8   21500   27  19700   Petrol\n",
            "9   12950   23  71138   Diesel\n",
            "10  20950   25  31461   Petrol\n",
            "11  19950   22  43610   Petrol\n",
            "12  19600   25  32189      CNG\n",
            "13  21500   31  23000      CNG\n",
            "14  22500   32  34131   Petrol\n",
            "15  22000   28  18739   Petrol\n",
            "16  22750   30  34000   Petrol\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "D. Check the datatype of the data and convert variable datatype into necessary formate"
      ],
      "metadata": {
        "id": "FZVXXKE0hFz8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "\n",
        "#upload a file from your location\n",
        "uploaded = files.upload()\n",
        "\n",
        "#get the name of the uploaded file\n",
        "Iriis= list(uploaded.keys())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "UPTuaHsshIE0",
        "outputId": "dc0bfd24-e4ff-45ff-a35b-f3978195c03a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f173b8ca-1a98-4a95-91d9-8b1f1f918d23\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f173b8ca-1a98-4a95-91d9-8b1f1f918d23\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Toyota_sample (1).xlsx to Toyota_sample (1) (1).xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "cars_data=pd.read_excel('Toyota_sample (1).xlsx', index_col=0)\n",
        "# copying the data into new dataframe\n",
        "cars_data1=cars_data.copy(deep=True)\n",
        "# dtypes returns a series with the data type of each column\n",
        "print('data type of each column:', cars_data1.dtypes)\n",
        "# selecting data based on data types\n",
        "print('selecting the data that excludes object data type:', cars_data1.select_dtypes (exclude=[object]))\n",
        "# Concise summary of a dataframe\n",
        "print(' returns a concise summary of a dataframe', cars_data1.info())\n",
        "# converting datatypes from one to another\n",
        "print('Datatype of Metcolor variable', cars_data1 ['MetColor'].dtypes)\n",
        "print('Datatype of Automatic variable', cars_data1 ['Automatic'].dtypes)\n",
        "cars_data1['MetColor'] = cars_data1 ['MetColor'].astype('object')\n",
        "cars_data1['Automatic']= cars_data1['Automatic'].astype('object')\n",
        "print('datatype of MetColor variable after conversion', cars_data1 ['MetColor'].dtypes)\n",
        "print('datatype of Automatic variable after conversion', cars_data1['Automatic'].dtypes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jEhbFMFohPsL",
        "outputId": "7eedd2dd-1b7f-4f88-db7e-dac1f6c50f22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "data type of each column: Price          int64\n",
            "Age            int64\n",
            "KM            object\n",
            "FuelType      object\n",
            "HP            object\n",
            "MetColor     float64\n",
            "Automatic      int64\n",
            "CC             int64\n",
            "Doors         object\n",
            "Weight         int64\n",
            "dtype: object\n",
            "selecting the data that excludes object data type:     Price  Age  MetColor  Automatic    CC  Weight\n",
            "0   13500   23       1.0          0  2000    1165\n",
            "1   13750   23       1.0          0  2000    1165\n",
            "2   13950   24       NaN          0  2000    1165\n",
            "3   14950   26       0.0          0  2000    1165\n",
            "4   13750   30       0.0          0  2000    1170\n",
            "5   12950   32       0.0          0  2000    1170\n",
            "6   16900   27       NaN          0  2000    1245\n",
            "7   18600   30       1.0          0  2000    1245\n",
            "8   21500   27       0.0          0  1800    1185\n",
            "9   12950   23       NaN          0  1900    1105\n",
            "10  20950   25       0.0          0  1800    1185\n",
            "11  19950   22       0.0          0  1800    1185\n",
            "12  19600   25       0.0          0  1800    1185\n",
            "13  21500   31       1.0          0  1800    1185\n",
            "14  22500   32       1.0          0  1800    1185\n",
            "15  22000   28       0.0          0  1800    1185\n",
            "16  22750   30       1.0          0  1800    1185\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 17 entries, 0 to 16\n",
            "Data columns (total 10 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   Price      17 non-null     int64  \n",
            " 1   Age        17 non-null     int64  \n",
            " 2   KM         17 non-null     object \n",
            " 3   FuelType   16 non-null     object \n",
            " 4   HP         17 non-null     object \n",
            " 5   MetColor   14 non-null     float64\n",
            " 6   Automatic  17 non-null     int64  \n",
            " 7   CC         17 non-null     int64  \n",
            " 8   Doors      17 non-null     object \n",
            " 9   Weight     17 non-null     int64  \n",
            "dtypes: float64(1), int64(5), object(4)\n",
            "memory usage: 1.5+ KB\n",
            " returns a concise summary of a dataframe None\n",
            "Datatype of Metcolor variable float64\n",
            "Datatype of Automatic variable int64\n",
            "datatype of MetColor variable after conversion object\n",
            "datatype of Automatic variable after conversion object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Y2zsc7wHiUvL"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rminmQNgiXuT"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}